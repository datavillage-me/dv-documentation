// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// HandleEventOK is response for HandleEvent operation.
type HandleEventOK struct{}

// NewOptRelease returns new OptRelease with value set to v.
func NewOptRelease(v Release) OptRelease {
	return OptRelease{
		Value: v,
		Set:   true,
	}
}

// OptRelease is optional Release.
type OptRelease struct {
	Value Release
	Set   bool
}

// IsSet returns true if OptRelease was set.
func (o OptRelease) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRelease) Reset() {
	var v Release
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRelease) SetTo(v Release) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRelease) Get() (v Release, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRelease) Or(d Release) Release {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReleasePublishedEventAction returns new OptReleasePublishedEventAction with value set to v.
func NewOptReleasePublishedEventAction(v ReleasePublishedEventAction) OptReleasePublishedEventAction {
	return OptReleasePublishedEventAction{
		Value: v,
		Set:   true,
	}
}

// OptReleasePublishedEventAction is optional ReleasePublishedEventAction.
type OptReleasePublishedEventAction struct {
	Value ReleasePublishedEventAction
	Set   bool
}

// IsSet returns true if OptReleasePublishedEventAction was set.
func (o OptReleasePublishedEventAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReleasePublishedEventAction) Reset() {
	var v ReleasePublishedEventAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReleasePublishedEventAction) SetTo(v ReleasePublishedEventAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReleasePublishedEventAction) Get() (v ReleasePublishedEventAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReleasePublishedEventAction) Or(d ReleasePublishedEventAction) ReleasePublishedEventAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReleasePublishedEventRepository returns new OptReleasePublishedEventRepository with value set to v.
func NewOptReleasePublishedEventRepository(v ReleasePublishedEventRepository) OptReleasePublishedEventRepository {
	return OptReleasePublishedEventRepository{
		Value: v,
		Set:   true,
	}
}

// OptReleasePublishedEventRepository is optional ReleasePublishedEventRepository.
type OptReleasePublishedEventRepository struct {
	Value ReleasePublishedEventRepository
	Set   bool
}

// IsSet returns true if OptReleasePublishedEventRepository was set.
func (o OptReleasePublishedEventRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReleasePublishedEventRepository) Reset() {
	var v ReleasePublishedEventRepository
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReleasePublishedEventRepository) SetTo(v ReleasePublishedEventRepository) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReleasePublishedEventRepository) Get() (v ReleasePublishedEventRepository, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReleasePublishedEventRepository) Or(d ReleasePublishedEventRepository) ReleasePublishedEventRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #
type Release struct {
	TagName         OptString `json:"tag_name"`
	TargetCommitish OptString `json:"target_commitish"`
	URL             OptString `json:"url"`
	AdditionalProps ReleaseAdditional
}

// GetTagName returns the value of TagName.
func (s *Release) GetTagName() OptString {
	return s.TagName
}

// GetTargetCommitish returns the value of TargetCommitish.
func (s *Release) GetTargetCommitish() OptString {
	return s.TargetCommitish
}

// GetURL returns the value of URL.
func (s *Release) GetURL() OptString {
	return s.URL
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *Release) GetAdditionalProps() ReleaseAdditional {
	return s.AdditionalProps
}

// SetTagName sets the value of TagName.
func (s *Release) SetTagName(val OptString) {
	s.TagName = val
}

// SetTargetCommitish sets the value of TargetCommitish.
func (s *Release) SetTargetCommitish(val OptString) {
	s.TargetCommitish = val
}

// SetURL sets the value of URL.
func (s *Release) SetURL(val OptString) {
	s.URL = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *Release) SetAdditionalProps(val ReleaseAdditional) {
	s.AdditionalProps = val
}

type ReleaseAdditional map[string]jx.Raw

func (s *ReleaseAdditional) init() ReleaseAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Events related to releases.
// Ref: #
type ReleasePublishedEvent struct {
	Action     OptReleasePublishedEventAction     `json:"action"`
	Release    OptRelease                         `json:"release"`
	Repository OptReleasePublishedEventRepository `json:"repository"`
}

// GetAction returns the value of Action.
func (s *ReleasePublishedEvent) GetAction() OptReleasePublishedEventAction {
	return s.Action
}

// GetRelease returns the value of Release.
func (s *ReleasePublishedEvent) GetRelease() OptRelease {
	return s.Release
}

// GetRepository returns the value of Repository.
func (s *ReleasePublishedEvent) GetRepository() OptReleasePublishedEventRepository {
	return s.Repository
}

// SetAction sets the value of Action.
func (s *ReleasePublishedEvent) SetAction(val OptReleasePublishedEventAction) {
	s.Action = val
}

// SetRelease sets the value of Release.
func (s *ReleasePublishedEvent) SetRelease(val OptRelease) {
	s.Release = val
}

// SetRepository sets the value of Repository.
func (s *ReleasePublishedEvent) SetRepository(val OptReleasePublishedEventRepository) {
	s.Repository = val
}

type ReleasePublishedEventAction string

const (
	ReleasePublishedEventActionPublished ReleasePublishedEventAction = "published"
)

// AllValues returns all ReleasePublishedEventAction values.
func (ReleasePublishedEventAction) AllValues() []ReleasePublishedEventAction {
	return []ReleasePublishedEventAction{
		ReleasePublishedEventActionPublished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReleasePublishedEventAction) MarshalText() ([]byte, error) {
	switch s {
	case ReleasePublishedEventActionPublished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReleasePublishedEventAction) UnmarshalText(data []byte) error {
	switch ReleasePublishedEventAction(data) {
	case ReleasePublishedEventActionPublished:
		*s = ReleasePublishedEventActionPublished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReleasePublishedEventRepository map[string]jx.Raw

func (s *ReleasePublishedEventRepository) init() ReleasePublishedEventRepository {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}
