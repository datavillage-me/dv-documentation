openapi: 3.0.0
info:
  title: ControlPlane API
  version: latest
servers:
  - url: https://<control-plane-api>
security:
  - bearerAuth: []
tags:
  - name: Collaboration Spaces
    description: "Endpoints related to collaboration spaces: CRUD and operating the space"
  - name: Cages
    description: Endpoints related to operating and monitoring cages
  - name: Invites
    description: Endpoints related to invitations to collaborate in collaboration spaces
  - name: Data Contracts
    description: Endpoints related to CRUD update of data contracts using ODCS (v3)
  - name: Clients
    description: Endpoints related to clients
  - name: Public
    description: Endpoints without authentication
paths:
  /auth/current-credentials:
    get:
      operationId: getCurrentCredentials
      summary: Get Current Credentials
      tags:
        - Authentication
      description: Get details about the authenticated account.
      responses:
        "200":
          description: The description of the authenticated developer.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Developer"
  /collaboration-spaces:
    get:
      operationId: GetCollaborationSpaces
      summary: Get Collaboration Spaces
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Collaboration Spaces
      description: Get all collaboration spaces the user has access to.
      responses:
        "200":
          description: The models of the collaboration spaces.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CollaborationSpace"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      operationId: CreateCollaborationSpace
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Collaboration Spaces
      summary: Create Collaboration Space
      description: Create a new collaboration space owned by the client the user is authenticated for.
      requestBody:
        description: The model of the space to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollaborationSpaceCreate"
      responses:
        "201":
          $ref: "#/components/responses/CreatedResource"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
  /collaboration-spaces/{spaceId}:
    get:
      operationId: GetCollaborationSpace
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Collaboration Spaces
      summary: Get Collaboration Space
      description: |
        Get a collaboration space by ID. Allowed if the client either owns it or is a collaborator.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the requested collaboration space.
      responses:
        "200":
          description: The model of the collaboration space.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollaborationSpace"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      operationId: UpdateCollaborationSpace
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Collaboration Spaces
      title: Update Collaboration Space
      description: Update a collaboration space by ID. Allowed if the client owns the space.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space to update.
      requestBody:
        description: The fields of the model to update. Nested objects will be overwritten when specified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollaborationSpaceUpdate"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      operationId: DeleteCollaborationSpace
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Collaboration Spaces
      summary: Delete Collaboration Space
      description: Delete a collaboration space by id. Allowed if the client owns the space.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space to delete.
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /collaboration-spaces/{spaceId}/collaborators:
    get:
      operationId: GetCollaborators
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Collaboration Spaces
      summary: Get Collaborators
      description: Get all collaborators of a collaboration space. Allowed if the client owns it or is a collaborator.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the requested collaboration space.
      responses:
        "200":
          description: The models of the collaborators in the space.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collaborator"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      operationId: CreateCollaborator
      tags:
        - Collaboration Spaces
      summary: Create Collaborator
      description: Add a new collaborator to a collaboration space. Allowed if the client owns the space.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space to add a collaborator to.
      requestBody:
        description: The model of the collaborator to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollaboratorCreate"
      responses:
        "410":
          description: Endpoint is deprecated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string
                    example: Endpoint is deprecated. Use invite flow to add collaborator
                required:
                  - error_message
  /collaboration-spaces/{spaceId}/collaborators/{collaboratorId}:
    get:
      operationId: GetCollaborator
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Collaboration Spaces
      summary: Get Collaborator
      description: Get a collaborator by ID. Allowed if the client is owner or collaborator of the collaboration space.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space of the collaborator.
        - in: path
          name: collaboratorId
          schema:
            type: string
          required: true
          description: The ID of the requested collaborator.
      responses:
        "200":
          description: The description of the collaborator.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collaborator"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      operationId: UpdateCollaborator
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Collaboration Spaces
      summary: Update Collaborator
      description: Update a collaborator by ID. Allowed if the client owns the collaborator.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space of the collaborator.
        - in: path
          name: collaboratorId
          schema:
            type: string
          required: true
          description: The ID of the collaborator to update.
      requestBody:
        description: The properties to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollaboratorUpdate"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      operationId: DeleteCollaborator
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Collaboration Spaces
      summary: Delete Collaborator
      description: Delete a collaborator by ID. Allowed if the client owns the collaborator.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space of the collaborator.
        - in: path
          name: collaboratorId
          schema:
            type: string
          required: true
          description: The ID of the requested collaborator.
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /collaboration-spaces/{spaceId}/algo/logs:
    get:
      operationId: GetAlgorithmLogs
      x-ogen-operation-group: CollaborationSpaces
      summary: Get Algorithm Logs
      description: Get `tail_lines` most recent lines of the output written by the algorithm.
      tags:
        - Cages
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space associated with the cage.
        - in: query
          name: tail_lines
          schema:
            type: integer
          required: false
          description: Number of lines to return.
      responses:
        "200":
          description: List of `tail_lines` most recent algorithm logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AlgoLog"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /collaboration-spaces/{spaceId}/attestation-token:
    get:
      operationId: GetAttestationReport
      summary: Get Attestation Report
      description: Get an attestation report of the virtual machine
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Cages
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the requested collaboration space.
        - in: query
          name: nonce
          description: |
            A nonce to add to the attestation report: * fingerpint: Attach a hex-encoded SHA-256 fingerprint of the public key
          schema:
            type: string
            enum:
              - fingerprint
          required: false
      responses:
        "200":
          description: An attestation report.
          content:
            text/plain:
              schema: null
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /collaboration-spaces/{spaceId}/deployment:
    get:
      operationId: GetDeployment
      x-ogen-operation-group: CollaborationSpaces
      summary: Get Deployment
      description: Get information of the current deployment of the cage. An object is returned that contains the status of the deployment as well as the status of individual pods of the platform.
      tags:
        - Cages
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space associated with the confidential cluster.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployment"
          headers:
            Signature:
              description: Base64 encoding of the response body signed by the secret manager
              required: false
              schema:
                type: string
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      operationId: DeleteCage
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Cages
      summary: Delete Cage
      description: Shut down the confidential cluster running the algorithm of a collaboration space.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space associated with the trusted environment.
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      operationId: DeployCage
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Cages
      summary: Deploy Cage
      description: Starts a confidential cluster if necessary and deploys the version of the algorithm as configured in the collaboration space model.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space for which to deploy a cage.
      responses:
        "200":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /collaboration-spaces/{spaceId}/deployment/logs:
    get:
      operationId: GetDeploymentLogs
      x-ogen-operation-group: CollaborationSpaces
      summary: Get Deployment Logs
      description: Get the deployment logs of the collaboration space.
      tags:
        - Cages
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space associated with the cage.
      responses:
        "200":
          description: Deployment logs of the last 24 hours.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeploymentLog"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /collaboration-spaces/{spaceId}/event:
    post:
      operationId: PublishEvent
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Cages
      summary: Publish Event
      description: Publish an event to the confidential environment of the collaboration space.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space to handle the event.
        - in: query
          name: stream
          schema:
            type: string
          required: false
          default: events
          description: The stream to add the event to.
      requestBody:
        description: The event to handle.
        name: event
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
              required:
                - type
              additionalProperties: true
      responses:
        "200":
          description: The ID of the event that has been published.
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                required:
                  - messageId
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /collaboration-spaces/{spaceId}/keys/public-key:
    get:
      operationId: GetPublicKey
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Cages
      title: Get Public Key
      description: Get the public key linked to a collaboration space.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the requested collaboration space.
      responses:
        "200":
          description: The public key.
          content:
            text/plain:
              schema: null
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /collaboration-spaces/{spaceId}/keys/transport-key:
    get:
      operationId: GetTransportKey
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Cages
      title: Get Transport Key
      description: Get the transport key linked to a collaboration space.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the requested collaboration space.
      responses:
        "200":
          description: An RSA public key
          content:
            text/plain:
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      operationId: RotateTransportKey
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Cages
      summary: Rotate the transport key of the cage.
      description: Replace the current public/private keypair with a new one. Secrets that were already stored on the secret manager will still be usable.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the requested collaboration space.
      responses:
        "200":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /collaboration-spaces/{spaceId}/keys/storage-key:
    post:
      operationId: RotateStorageKey
      summary: Rotate the storage key of the cage.
      description: Replace the current storage key with a new one. Secrets that were already stored on the secret manager will not be retrievable anymore.
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Cages
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the requested collaboration space.
      responses:
        "200":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /collaboration-spaces/{spaceId}/secrets/{secretId}:
    put:
      operationId: StoreSecret
      x-ogen-operation-group: CollaborationSpaces
      tags:
        - Cages
      summary: Store secret
      description: |
        Stores the content of the request as a secret in the cage. Secrets that already exist will be overwritten.  A secret can be encrypted with the public key of the cage. The cage will then have access to the decrypted version. This encryption should be done client side such that the platform never sees the decrypted data.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space associated with the cage.
        - in: path
          name: secretId
          schema:
            type: string
          required: true
          description: The id of the secret that is saved
      requestBody:
        description: The content of the file to upload to the cage.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - secret
              properties:
                secret:
                  type: string
                  format: binary
                  description: The secret to store in the secret-manager. It is stored 'as-is'. These files should be encrypted with the public key obtained via the `/public-key` endpoint.
      responses:
        "200":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /clients/{clientId}/notifications:
    get:
      operationId: GetNotifications
      x-ogen-operation-group: Clients
      tags:
        - Clients
      summary: Get Notifications
      description: Get all notifications related to a client.
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: The requested client.
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /clients/{clientId}:
    get:
      operationId: GetClient
      x-ogen-operation-group: Clients
      tags:
        - Clients
      summary: Get Client
      description: Get all information related to a client.
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: The requested client.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DvClient"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /data-contracts:
    get:
      tags:
        - Data Contracts
      operationId: GetDataContracts
      x-ogen-operation-group: DataContracts
      summary: Get Data Contracts
      description: Get all data contracts your account has access to, optionally filtering by name.
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: The name filter. Filtering is case insensitive.
      responses:
        "200":
          description: The summary of the contracts that matched the filter.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataContractSummary"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Data Contracts
      operationId: CreateDataContract
      x-ogen-operation-group: DataContracts
      summary: Create Data Contract
      description: Create a new data contract based on an ODCS description. It will be owned by the client the account is authenticated for.
      requestBody:
        description: The ODCS properties of the new data contract.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataContractCreate"
          application/yaml:
            schema:
              $ref: "#/components/schemas/DataContractCreate"
      responses:
        "201":
          $ref: "#/components/responses/CreatedResource"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /data-contracts/{contractId}:
    get:
      tags:
        - Data Contracts
      operationId: GetDataContract
      x-ogen-operation-group: DataContracts
      summary: Get Data Contract
      description: Get a data contract by ID.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the requested data contract
      responses:
        "200":
          description: The ODCS description of the data contract.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataContract"
            application/yaml:
              schema:
                $ref: "#/components/schemas/DataContract"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - Data Contracts
      operationId: UpdateDataContract
      x-ogen-operation-group: DataContracts
      summary: Update Data Contract
      description: Update ODCS properties of a data contract by ID. Nested fields are overwritten when specified. Allowed if the client is the owner.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the data contract to update.
      requestBody:
        description: The ODCS properties to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataContractUpdate"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Data Contracts
      operationId: DeleteDataContract
      summary: Delete Data Contract
      description: Delete a data contract by ID. Allowed if the client owns the contract.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the data contract to delete.
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /data-contracts/{contractId}/schema:
    post:
      tags:
        - Data Contracts
      operationId: CreateSchema
      x-ogen-operation-group: DataContracts
      summary: Create Schema
      description: Create a new schema based on an ODCS description. Allowed if the client is the owner of the contract.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the data contract to add the schema to.
      requestBody:
        description: The ODCS properties of the schema.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaCreate"
      responses:
        "201":
          $ref: "#/components/responses/CreatedResource"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /data-contracts/{contractId}/schema/{schemaId}:
    get:
      tags:
        - Data Contracts
      operationId: GetSchema
      x-ogen-operation-group: DataContracts
      summary: Get Schema
      description: Get the ODCS description of a schema by ID.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the data contract where the schema can be found.
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: The ID of the requested schema.
      responses:
        "200":
          description: The ODCS description of the schema.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schema"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - Data Contracts
      summary: Update Schema
      operationId: UpdateSchema
      description: Update ODCS properties of a schema by ID. Nested fields will be overwritten if specified. Allowed if the client owns the contract.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the data contract where the schema can be found.
        - in: path
          name: schemaId
          schema:
            type: string
          description: The ID of the schema to update.
          required: true
      requestBody:
        description: The ODCS properties to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaUpdate"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Data Contracts
      summary: Delete Schema
      operationId: DeleteSchema
      description: Delete a schema by ID. Allowed if the client owns the contract.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the data contract where the schema can be found.
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: The ID of the schema to delete.
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /data-contracts/{contractId}/schema/{schemaId}/properties:
    post:
      tags:
        - Data Contracts
      summary: Create Property
      x-ogen-operation-group: DataContracts
      operationId: CreateProperty
      description: Create a new property based on an ODCS description. Allowed if the client is the owner of the contract.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the data contract to add a property to.
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: The ID of the schema in the contract where to add the property to.
      requestBody:
        description: The ODCS properties of the property.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyCreate"
      responses:
        "201":
          $ref: "#/components/responses/CreatedResource"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /data-contracts/{contractId}/schema/{schemaId}/properties/{propertyId}:
    get:
      tags:
        - Data Contracts
      summary: Get Property
      x-ogen-operation-group: DataContracts
      operationId: GetProperty
      description: Get the ODCS description of a property by ID.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the data contract where the property can be found.
        - in: path
          name: schemaId
          schema:
            type: string
          description: The ID of the schema in the contract where the property can be found.
          required: true
        - in: path
          name: propertyId
          schema:
            type: string
          required: true
          description: The ID of the requested property.
      responses:
        "200":
          description: The ODCS description of the property.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - Data Contracts
      summary: Update Property
      x-ogen-operation-group: DataContracts
      operationId: UpdateProperty
      description: Update ODCS properties of a property by ID. Allowed if the client owns the contract.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the data contract where the property can be found.
        - in: path
          name: schemaId
          schema:
            type: string
          description: The ID of the schema in the data contract where the property can be found.
          required: true
        - in: path
          name: propertyId
          schema:
            type: string
          required: true
          description: The ID of the property to update.
      requestBody:
        description: The ODCS properties to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyUpdate"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Data Contracts
      summary: Delete Property
      x-ogen-operation-group: DataContracts
      operationId: DeleteProperty
      description: Delete a property by ID. Allowed if the client owns the contract.
      parameters:
        - in: path
          name: contractId
          schema:
            type: string
          required: true
          description: The ID of the data contract where the property can be found.
        - in: path
          name: schemaId
          schema:
            type: string
          required: true
          description: The ID of the schema in the contract where the property can be found.
        - in: path
          name: propertyId
          schema:
            type: string
          required: true
          description: The ID of the property to delete.
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /invites:
    get:
      operationId: GetInvites
      x-ogen-operation-group: Invites
      summary: Get Invites
      description: Get all invites created by the authenticated client.
      tags:
        - Invites
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invite"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
    post:
      operationId: CreateInvite
      x-ogen-operation-group: Invites
      summary: Invite Collaborator
      description: Create an invite to collaborate in a space.
      tags:
        - Invites
      requestBody:
        description: The invite to be send.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteCreate"
      responses:
        "201":
          $ref: "#/components/responses/CreatedResource"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
  /invites/{inviteId}:
    get:
      operationId: GetInvite
      x-ogen-operation-group: Invites
      summary: Get Invite
      description: Get invite by ID.
      tags:
        - Invites
      parameters:
        - in: path
          name: inviteId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Succesfully got invite.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invite"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      operationId: DeleteInvite
      x-ogen-operation-group: Invites
      summary: Delete Invite
      description: Delete an invite by ID. Only allowed for pending invites.
      tags:
        - Invites
      parameters:
        - in: path
          name: inviteId
          schema:
            type: string
          required: true
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /invites/{inviteId}/accept:
    post:
      operationId: AcceptInvite
      x-ogen-operation-group: Invites
      summary: Accept Invite
      description: Accept an invite on behalf of the authenticated client.
      tags:
        - Invites
      parameters:
        - in: path
          name: inviteId
          schema:
            type: string
          required: true
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /.well-known/collaboration-spaces/{spaceId}/webid:
    get:
      security: []
      operationId: GetCollaborationSpaceWebId
      x-ogen-operation-group: WellKnown
      tags:
        - Public
      summary: Get WebId Document
      description: Get the turtle document describing the collaboration space as an agent in a Solid eco-system. The URI serves as WebID of the agent.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the collaboration space associated with the WebID.
      responses:
        "200":
          description: The WebId document conform the Solid specifications, serialized in turtle format.
          content:
            text/turtle:
              schema:
                type: string
                example: |
                  @prefix foaf: <http://xmlns.com/foaf/0.1/>.
                  @prefix solid: <http://www.w3.org/ns/solid/terms#>.
                  @prefix skos: <http://www.w3.org/2004/02/skos/core#>.

                  <https://api.gke.datavillage.me/.well-known/collaboration-spaces/abcd/webid>
                    a foaf:Agent ;
                    solid:oidcIssuer   <https://solid-idp.datavillage.me> ;
                    skos:prefLabel "Test collaboration space";
                    foaf:logo <https://client.example/logo.png>;
                    foaf:homepage <https://client.example/>.
        "404":
          $ref: "#/components/responses/NotFoundError"
  /.well-known/collaboration-spaces/{spaceId}/appid:
    get:
      security: []
      operationId: GetCollaborationSpaceAppId
      x-ogen-operation-group: WellKnown
      tags:
        - Public
      summary: Get AppId Document
      description: Get the JSON-LD application document to authenticate the application in a Solid eco-system.
      parameters:
        - in: path
          name: spaceId
          schema:
            type: string
          required: true
          description: The ID of the requested collaboration space associated with the AppID.
      responses:
        "200":
          description: The AppId document serialized as JSON-LD conform the Solid specifications.
          content:
            application/ld+json:
              schema:
                type: string
                example: |
                  {
                    "@context": "https://www.w3.org/ns/solid/oidc-context.jsonld",
                    "client_id": "https://api.gke.datavillage.me/.well-known/collaboration-spaces/abcd/appid",
                    "redirect_uris": [],
                    "scope": "openid webid",
                    "grant_types": ["password"],
                    "client_name": "Test collaboration space - application",
                    "logo_uri": "https://client.example/logo.png"
                  }
        "404":
          $ref: "#/components/responses/NotFoundError"
  /.well-known/clients/{clientLabel}:
    get:
      operationId: GetPublicClient
      x-ogen-operation-group: WellKnown
      security: []
      tags:
        - Public
      summary: Get Client Info
      description: Get public information about a client based on a human readable label.
      parameters:
        - in: path
          name: clientLabel
          required: true
          schema:
            type: string
          description: A human readable label that uniquely identifies the client.
      responses:
        "200":
          description: Public information about the client.
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    description: The IDP the client uses to authenticate its developers.
                required:
                  - issuer
        "404":
          $ref: "#/components/responses/NotFoundError"
components:
  schemas:
    CollaborationSpace:
      allOf:
        - type: object
          properties:
            id:
              type: string
          required:
            - id
            - name
        - $ref: "#/components/schemas/AbstractCollaborationSpace"
        - $ref: "#/components/schemas/Timestamps"
        - type: object
          properties:
            collaborators:
              type: array
              items:
                $ref: "#/components/schemas/Collaborator"
    CollaborationSpaceCreate:
      allOf:
        - $ref: "#/components/schemas/AbstractCollaborationSpace"
        - type: object
          properties:
            collaborators:
              type: array
              items:
                $ref: "#/components/schemas/CollaboratorCreate"
          required:
            - name
    Collaborator:
      description: Collaborator
      title: Collaborator
      allOf:
        - type: object
          properties:
            id:
              type: string
          required:
            - id
            - clientId
        - $ref: "#/components/schemas/AbstractCollaborator"
    CollaboratorCreate:
      description: CollaboratorCreate
      title: CollaboratorCreate
      allOf:
        - $ref: "#/components/schemas/AbstractCollaborator"
        - type: object
          required:
            - clientId
    Developer:
      type: object
      properties:
        clientId:
          type: string
      required:
        - clientId
    DataContract:
      title: Data Contract
      description: ODCS compliant description of a data contract with metadata fields added by Datavillage DCP
      allOf:
        - $ref: "#/components/schemas/DataContractDV"
        - $ref: "#/components/schemas/Timestamps"
        - type: object
          properties:
            dataContract:
              title: Data Contract ODCS
              allOf:
                - $ref: "#/components/schemas/AbstractDataContract"
                - type: object
                  properties:
                    schema:
                      type: array
                      items:
                        $ref: "#/components/schemas/Schema"
                  required:
                    - version
                    - name
                    - status
                    - id
                    - apiVersion
                    - kind
          required:
            - dataContract
    DataContractCreate:
      title: Data Contract Create
      description: ODCS description of a data contract
      allOf:
        - $ref: "#/components/schemas/AbstractDataContract"
        - type: object
          properties:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SchemaCreate"
          required:
            - version
            - name
            - status
            - id
            - apiVersion
            - kind
    Invite:
      description: Invite
      title: Invite
      allOf:
        - type: object
          properties:
            id:
              type: string
            clientId:
              type: string
              description: ID of the client that created the invite.
            status:
              type: string
              description: The status of the invite.
              enum:
                - pending
                - accepted
        - $ref: "#/components/schemas/AbstractInvite"
        - type: object
          properties:
            created:
              type: string
              format: date-time
              description: Date and time when invite was created.
            acceptedBy:
              type: string
              description: ID of the client that accepted the invite.
            accepted:
              type: string
              format: date-time
              description: Date and time when the invite was accepted.
          required:
            - id
            - status
            - clientId
            - spaceId
            - created
            - role
    InviteCreate:
      description: Create Invite
      title: InviteCreate
      allOf:
        - $ref: "#/components/schemas/AbstractInvite"
        - type: object
          required:
            - spaceId
            - role
    Schema:
      title: Schema
      description: Identifiable ODCS description of a schema
      allOf:
        - type: object
          properties:
            id:
              type: string
          required:
            - name
            - id
        - $ref: "#/components/schemas/AbstractSchema"
        - type: object
          properties:
            properties:
              type: array
              items:
                $ref: "#/components/schemas/Property"
    SchemaCreate:
      title: Schema Create
      description: ODCS description of a schema
      allOf:
        - $ref: "#/components/schemas/AbstractSchema"
        - type: object
          properties:
            properties:
              type: array
              items:
                $ref: "#/components/schemas/PropertyCreate"
          required:
            - name
    Property:
      title: Property
      description: Identifiable ODCS description of a property
      allOf:
        - type: object
          properties:
            id:
              type: string
          required:
            - name
            - id
        - $ref: "#/components/schemas/AbstractProperty"
    PropertyCreate:
      title: Property Create
      description: ODCS compliant description of a property
      allOf:
        - $ref: "#/components/schemas/AbstractProperty"
        - type: object
          required:
            - name
    DataQuality:
      type: array
      description: Data quality rules with all the relevant information for rule setup and execution
      items:
        type: object
        discriminator:
          propertyName: type
          mapping:
            library: "#/components/schemas/DataQualityLibrary"
            sql: "#/components/schemas/DataQualitySql"
        oneOf:
          - $ref: "#/components/schemas/DataQualityLibrary"
          - $ref: "#/components/schemas/DataQualitySql"
        properties:
          businessImpact:
            type: string
            description: Consequences of the rule failure.
            examples:
              - operational
              - regulatory
          description:
            type: string
            description: Describe the quality check to be completed.
          dimension:
            type: string
            description: The key performance indicator (KPI) or dimension for data quality.
            enum:
              - accuracy
              - completeness
              - conformity
              - consistency
              - coverage
              - timeliness
              - uniqueness
          method:
            type: string
            examples:
              - reconciliation
          name:
            type: string
            description: Name of the data quality check.
          schedule:
            type: string
            description: Rule execution schedule details.
            examples:
              - 0 20 * * *
          scheduler:
            type: string
            description: The name or type of scheduler used to start the data quality check.
            examples:
              - cron
          severity:
            type: string
            description: The severance of the quality rule.
            examples:
              - info
              - warning
              - error
          unit:
            type: string
            description: Unit the rule is using, popular values are `rows` or `percent`, but any value is allowed.
            examples:
              - rows
              - percent
          tags:
            type: array
            items:
              type: string
            description: A list of tags that may be assigned to the elements (object or property); the tags keyword may appear at any level.
          authoritativeDefinitions:
            type: array
            items:
              $ref: "#/components/schemas/AuthoritativeDefinition"
          customProperties:
            type: array
            description: Additional properties required for rule execution.
            items:
              $ref: "#/components/schemas/CustomProperty"
    Server:
      $ref: "#/components/schemas/ODCSServer"
    AbstractCollaborationSpace:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
    Timestamps:
      type: object
      properties:
        created:
          type: string
          format: date-time
          description: The date and time when the document was created.
        updated:
          type: string
          format: date-time
          description: The date and time of the last update to the document.
      required:
        - created
        - updated
    CollaboratorRoleCodeProvider:
      type: object
      x-ogen-name: CodeProvider
      description: Someone who provides code
      title: CodeProvider
      properties:
        role:
          type: string
          example: CodeProvider
        settings:
          type: object
          properties:
            description:
              type: string
        cron:
          type: array
          items:
            type: object
            title: Cron
            required:
              - expression
              - type
            properties:
              expression:
                type: string
              type:
                type: string
                description: The type of event that will be sent on the CRON schedule.
        source:
          type: object
          title: AlgoSource
          required:
            - registry
            - image
            - tag
          properties:
            registry:
              type: string
            image:
              type: string
            tag:
              type: string
            secret:
              type: string
              description: A value that will be interpreted as an ImagePullSecret. An example would be a github access token that has at least the scope `packages:read`, base64 encoded as `username:token`. If no value is provided no ImagePullSecret will be used when deploying the cage.
    CollaboratorRoleDataProvider:
      type: object
      x-ogen-name: DataProvider
      title: DataProvider
      description: Someone who provides Data
      properties:
        role:
          type: string
          example: DataProvider
        dataContract:
          type: string
          description: ID of the data contract that describes the expected structure of the provided data.
        settings:
          type: object
          properties:
            description:
              type: string
    CollaboratorRoleDataConsumer:
      type: object
      x-ogen-name: DataConsumer
      title: DataConsumer
      description: Someone who consumes data
      properties:
        role:
          type: string
          example: DataConsumer
        dataContract:
          type: string
          description: ID of the data conttract that describes the expected structure of the consumed data.
        settings:
          type: object
          properties:
            description:
              type: string
    AbstractCollaborator:
      allOf:
        - type: object
          description: Abstract Collaborator
          properties:
            clientId:
              type: string
            name:
              type: string
              description: A name given the collaborator. This value is intended to be read by humans.
              example: My Collaborator
            label:
              type: string
              description: A label given the collaborator. This value is intended to refered to in code.
              example: my-collaborator
            configuration:
              description: A configuration of the collaborator. This is an object representing key-value pairs that will be available in the cage as environment variables.
              type: object
              additionalProperties:
                type: string
        - discriminator:
            propertyName: role
            mapping:
              CodeProvider: "#/components/schemas/CollaboratorRoleCodeProvider"
              DataProvider: "#/components/schemas/CollaboratorRoleDataProvider"
              DataConsumer: "#/components/schemas/CollaboratorRoleDataConsumer"
          oneOf:
            - $ref: "#/components/schemas/CollaboratorRoleCodeProvider"
            - $ref: "#/components/schemas/CollaboratorRoleDataProvider"
            - $ref: "#/components/schemas/CollaboratorRoleDataConsumer"
    CollaborationSpaceUpdate:
      allOf:
        - $ref: "#/components/schemas/AbstractCollaborationSpace"
        - type: object
          properties:
            collaborators:
              type: array
              items:
                $ref: "#/components/schemas/CollaboratorCreate"
    CollaboratorUpdate:
      description: Collaborator Update
      title: CollaboratorUpdate
      allOf:
        - $ref: "#/components/schemas/AbstractCollaborator"
    AlgoLog:
      type: object
      properties:
        time:
          type: string
          format: date-time
        log:
          type: object
          properties:
            msg:
              type: string
            event:
              type: string
            eventStream:
              type: string
            libraryVersion:
              type: string
          required:
            - msg
            - libraryVersion
      required:
        - time
        - log
    PodStatus:
      type: object
      required:
        - name
        - status
        - imageId
      properties:
        name:
          type: string
        status:
          type: string
        status_since:
          type: string
          format: date-time
        containers:
          type: array
          items:
            type: object
            properties:
              imageId:
                type: string
              image:
                type: string
              state:
                type: string
            required:
              - imageId
              - image
              - state
    Deployment:
      type: object
      properties:
        status:
          type: string
          enum:
            - deployed
            - failed
            - pending
            - missing
            - unknown
        pods:
          type: array
          items:
            $ref: "#/components/schemas/PodStatus"
      required:
        - status
    DeploymentLog:
      type: object
      properties:
        time:
          type: string
          format: date-time
        msg:
          type: string
      required:
        - time
        - msg
    DvClient:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        label:
          type: string
        logoUrl:
          type: string
      required:
        - id
        - name
        - label
    DataContractDV:
      description: Metadata added to data contracts by Datavillage DCP
      type: object
      properties:
        id:
          type: string
          description: A unique identifier used in the Datavillage DCP to identify a data contract
        clientId:
          type: string
          description: Id of the client owning the data contract
      required:
        - id
        - clientId
    DataContractSummary:
      title: Data Contract Summary
      description: The metadata fields added by Datavillage DCP along with key properties of ODCS description
      allOf:
        - $ref: "#/components/schemas/DataContractDV"
        - $ref: "#/components/schemas/Timestamps"
        - type: object
          properties:
            dataContractSummary:
              type: object
              properties:
                version:
                  type: string
                  description: Current version of the data contract.
                name:
                  type: string
                  description: Name of the data contract.
                status:
                  type: string
                  description: Current status of the dataset. Valid values are `production`, `test`, or `development`.
                  example:
                    - production
                    - test
                    - development
              required:
                - version
                - name
                - status
        - required:
            - dataContractSummary
    Description:
      type: object
      properties:
        usage:
          type: string
          description: Intended usage of the dataset.
        purpose:
          type: string
          description: Purpose of the dataset.
        limitations:
          type: string
          description: Limitations of the dataset.
    Price:
      type: object
      title: Price
      properties:
        priceAmount:
          type: number
          description: Subscription price per unit of measure in `priceUnit`.
        priceCurrency:
          type: string
          description: Currency of the subscription price in `priceAmount`.
        priceUnit:
          type: string
          description: The unit of measure for calculating cost. Examples megabyte, gigabyte.
    ApiServer:
      type: object
      x-ogen-name: ApiServer
      description: Data can be fetched with API call
      properties:
        type:
          type: string
          description: Type of the server.
          example: api
        location:
          type: string
          format: uri
          description: The url to the API.
          examples:
            - https://api.example.com/v1
      required:
        - type
        - location
    CustomServer:
      type: object
      x-ogen-name: CustomServer
      description: Customise how data is fetched
      properties:
        type:
          type: string
          description: Type of the server.
          example: custom
        location:
          type: string
          description: A URL to a location.
          format: uri
        path:
          type: string
          description: Relative or absolute path to the data file(s).
        account:
          type: string
          description: Account used by the server.
        catalog:
          type: string
          description: Name of the catalog.
        database:
          type: string
          description: Name of the database.
        dataset:
          type: string
          description: Name of the dataset.
        delimiter:
          type: string
          description: Delimiter.
        endpointUrl:
          type: string
          description: Server endpoint.
          format: uri
        format:
          type: string
          description: File format.
        host:
          type: string
          description: Host name or IP address.
        port:
          type: integer
          description: Port to the server. No default value is assumed for custom servers.
        project:
          type: string
          description: Project name.
        region:
          type: string
          description: Cloud region.
        regionName:
          type: string
          description: Region name.
        schema:
          type: string
          description: Name of the schema.
        serviceName:
          type: string
          description: Name of the service.
        stagingDir:
          type: string
          description: Staging directory.
        warehouse:
          type: string
          description: Name of the cluster or warehouse.
      required:
        - type
    ODCSServer:
      type: object
      description: Data source details of where data is physically stored.
      discriminator:
        propertyName: type
        mapping:
          api: "#/components/schemas/ApiServer"
          custom: "#/components/schemas/CustomServer"
      oneOf:
        - $ref: "#/components/schemas/ApiServer"
        - $ref: "#/components/schemas/CustomServer"
      properties:
        server:
          type: string
          description: Identifier of the server.
        description:
          type: string
          description: Description of the server.
        environment:
          type: string
          description: Environment of the server.
          examples:
            - prod
            - preprod
            - dev
            - uat
      required:
        - server
    AbstractDataContract:
      type: object
      properties:
        id:
          type: string
          description: |
            A unique identifier used to reduce the risk of dataset name collisions, such as a UUID. This is an ODCS property and only has meaning for the data owner and is not used to identify data contracts in the Datavillage DCP
        version:
          type: string
          description: Current version of the data contract.
        name:
          type: string
          description: Name of the data contract.
        status:
          type: string
          description: Current status of the dataset. Valid values are `production`, `test`, or `development`.
          example:
            - production
            - test
            - development
        apiVersion:
          type: string
          description: Version of the standard used to build data contract. Default value is v3.0.0.
          default: v3.0.0
          enum:
            - v3.0.0
            - v2.2.2
            - v2.2.1
            - v2.2.0
        kind:
          type: string
          default: DataContract
          enum:
            - DataContract
        tenant:
          type: string
          description: Indicates the property the data is primarily associated with. Value is case insensitive.
        tags:
          type: array
          description: A list of tags that may be assigned to the elements (object or property); the tags keyword may appear at any level.
          items:
            type: string
        dataProduct:
          type: string
          description: The name of the data product.
        description:
          $ref: "#/components/schemas/Description"
        price:
          $ref: "#/components/schemas/Price"
        domain:
          type: string
          description: Name of the logical data domain
          example:
            - imdb_ds_aggregate
            - receiver_profile_out
            - transaction_profile_out
        slaDefaultElement:
          type: string
          description: Element (using the element path notation) to do the checks on.
        contractCreatedTs:
          type: string
          format: date-time
          description: Timestamp in UTC of when the data contract was created.
        servers:
          type: array
          description: List of servers where the datasets reside.
          items:
            $ref: "#/components/schemas/ODCSServer"
    DataQualityLibrary:
      type: object
      x-ogen-name: DataQualityLibrary
      properties:
        type:
          type: string
          description: The type of quality check. 'text' is human-readable text that describes the quality of the data. 'library' is a set of maintained predefined quality attributes such as row count or unique. 'sql' is an individual SQL query that returns a value that can be compared. 'custom' is quality attributes that are vendor-specific, such as Soda or Great Expectations.
          enum:
            - text
            - library
            - sql
            - custom
          default: library
        rule:
          type: string
          description: Define a data quality check based on the predefined rules as per ODCS.
          examples:
            - duplicateCount
            - validValues
            - rowCount
        mustBe:
          description: Must be equal to the value to be valid. When using numbers, it is equivalent to '='.
        mustNotBe:
          description: Must not be equal to the value to be valid. When using numbers, it is equivalent to '!='.
        mustBeGreaterThan:
          type: number
          description: Must be greater than the value to be valid. It is equivalent to '>'.
        mustBeGreaterOrEqualTo:
          type: number
          description: Must be greater than or equal to the value to be valid. It is equivalent to '>='.
        mustBeLessThan:
          type: number
          description: Must be less than the value to be valid. It is equivalent to '<'.
        mustBeLessOrEqualTo:
          type: number
          description: Must be less than or equal to the value to be valid. It is equivalent to '<='.
        mustBeBetween:
          type: array
          description: Must be between the two numbers to be valid. Smallest number first in the array.
          minItems: 2
          maxItems: 2
          uniqueItems: true
          nullable: true
          items:
            type: number
        mustNotBeBetween:
          type: array
          description: Must not be between the two numbers to be valid. Smallest number first in the array.
          minItems: 2
          maxItems: 2
          uniqueItems: true
          nullable: true
          items:
            type: number
      required:
        - rule
    DataQualitySql:
      type: object
      x-ogen-name: DataQualitySql
      properties:
        type:
          type: string
          description: The type of quality check. 'text' is human-readable text that describes the quality of the data. 'library' is a set of maintained predefined quality attributes such as row count or unique. 'sql' is an individual SQL query that returns a value that can be compared. 'custom' is quality attributes that are vendor-specific, such as Soda or Great Expectations.
          enum:
            - text
            - library
            - sql
            - custom
          default: library
        query:
          type: string
          description: Query string that adheres to the dialect of the provided server.
          examples:
            - SELECT COUNT(*) FROM ${table} WHERE ${column} IS NOT NULL
      required:
        - query
    AuthoritativeDefinition:
      type: object
      description: Link to source that provides more details on the dataset; examples would be a link to an external definition, a training video, a GitHub repo, Collibra, or another tool. Authoritative definitions follow the same structure in the standard.
      properties:
        url:
          type: string
          description: URL to the authority.
        type:
          type: string
          description: "Type of definition for authority: v2.3 adds standard values: `businessDefinition`, `transformationImplementation`, `videoTutorial`, `tutorial`, and `implementation`."
          examples:
            - businessDefinition
            - transformationImplementation
            - videoTutorial
            - tutorial
            - implementation
      required:
        - url
        - type
    AnyType:
      nullable: true
      anyOf:
        - type: string
        - type: number
        - type: integer
        - type: boolean
        - type: array
          items: {}
        - type: object
          additionalProperties: true
    CustomProperty:
      type: object
      properties:
        property:
          type: string
          description: The name of the key. Names should be in camel-case the same as if they were permanent properties in the contract.
        value:
          description: The value of the key.
          $ref: "#/components/schemas/AnyType"
    Element:
      type: object
      properties:
        name:
          type: string
          description: Name of the element.
        physicalType:
          type: string
          description: The physical element data type in the data source.
          example:
            - table
            - view
            - topic
            - file
        description:
          type: string
          description: Description of the element.
        businessName:
          type: string
          description: The business name of the element.
        tags:
          type: array
          items:
            type: string
          description: A list of tags that may be assigned to the elements (object or property); the tags keyword may appear at any level.
        quality:
          $ref: "#/components/schemas/DataQuality"
    AbstractSchema:
      allOf:
        - $ref: "#/components/schemas/Element"
        - type: object
          properties:
            logicalType:
              type: string
              description: The logical element data type.
              enum:
                - object
            physicalName:
              type: string
              description: Physical name.
              example:
                - table_1_2_0
            dataGranularityDescription:
              type: string
              description: Granular level of the data in the object.
              example:
                - Aggregation by country
    AbstractProperty:
      properties:
        examples:
          type: array
          description: List of sample element values.
          items:
            $ref: "#/components/schemas/AnyType"
      allOf:
        - $ref: "#/components/schemas/Element"
        - type: object
          properties:
            primaryKey:
              type: boolean
              description: Boolean value specifying whether the element is primary or not. Default is false.
            primaryKeyPosition:
              type: integer
              description: If element is a primary key, the position of the primary key element. Starts from 1. Example of `account_id, name` being primary key columns, `account_id` has primaryKeyPosition 1 and `name` primaryKeyPosition 2. Default to -1.
            logicalType:
              type: string
              description: The logical element data type.
              enum:
                - string
                - date
                - number
                - integer
                - object
                - array
                - boolean
            logicalTypeOptions:
              type: object
              description: Additional optional metadata to describe the logical type.
            physicalType:
              type: string
              description: The physical element data type in the data source. For example, VARCHAR(2), DOUBLE, INT.
            required:
              type: boolean
              description: Indicates if the element may contain Null values; possible values are true and false. Default is false.
            unique:
              type: boolean
              description: Indicates if the element contains unique values; possible values are true and false. Default is false.
            partitioned:
              type: boolean
              description: Indicates if the element is partitioned; possible values are true and false.
            partitionKeyPosition:
              type: integer
              description: If element is used for partitioning, the position of the partition element. Starts from 1. Example of `country, year` being partition columns, `country` has partitionKeyPosition 1 and `year` partitionKeyPosition 2. Default to -1.
            classification:
              type: string
              description: Can be anything, like confidential, restricted, and public to more advanced categorization. Some companies like PayPal, use data classification indicating the class of data in the element; expected values are 1, 2, 3, 4, or 5.
              example:
                - confidential
                - restricted
                - public
            encryptedName:
              type: string
              description: The element name within the dataset that contains the encrypted element value. For example, unencrypted element `email_address` might have an encryptedName of `email_address_encrypt`.
            transformSourceObjects:
              type: array
              description: List of objects in the data source used in the transformation.
              items:
                type: string
            transformLogic:
              type: string
              description: Logic used in the element transformation.
            transformDescription:
              type: string
              description: Describes the transform logic in very simple terms.
            criticalDataElement:
              type: boolean
              description: True or false indicator; If element is considered a critical data element (CDE) then true else false.
    DataContractUpdate:
      title: Data Contract Update
      description: ODCS properties of a data contract where schemas should comply
      allOf:
        - $ref: "#/components/schemas/AbstractDataContract"
        - type: object
          properties:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SchemaCreate"
    SchemaUpdate:
      title: Schema Update
      description: ODCS properties of a schema where 'properties'-property should comply
      allOf:
        - $ref: "#/components/schemas/AbstractSchema"
        - type: object
          properties:
            properties:
              type: array
              items:
                $ref: "#/components/schemas/PropertyCreate"
    PropertyUpdate:
      title: Update Property
      description: ODCS properties of a property
      allOf:
        - $ref: "#/components/schemas/AbstractProperty"
    AbstractInvite:
      type: object
      description: Abstract Invite
      properties:
        spaceId:
          type: string
          description: The space for which to create an invite.
        role:
          type: string
          description: The role in the space that will be held by the client that accepts the invite.
          enum:
            - CodeProvider
            - DataProvider
            - DataConsumer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: User is not authenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              error_message:
                type: string
            required:
              - error_message
    CreatedResource:
      description: Resource was created successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
            required:
              - id
      headers:
        Location:
          required: true
          schema:
            type: string
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error_message:
                type: string
            required:
              - error_message
    ForbiddenError:
      description: Authenticated user does not have access
      content:
        application/json:
          schema:
            type: object
            properties:
              error_message:
                type: string
            required:
              - error_message
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error_message:
                type: string
                default: Document not found
            required:
              - error_message
    NoContent:
      description: Request executed successfully
